# corpus_builder.py
# V6 - The Architect's Version. Implements a superior, structured format
# that explicitly separates narrative from instruction-following tasks.

from datasets import load_dataset
from tqdm import tqdm
import textwrap

# --- CONFIGURATION ---
DATA_MIX = {
    "OpenOrca": {
        "id": "Open-Orca/OpenOrca",
        "count": 5000,
        "formatter": "format_openorca_entry",
    },
    "TinyStories": {
        "id": "roneneldan/TinyStories",
        "count": 5000,
        "formatter": "format_tinystory_entry",
    }
}
OUTPUT_FILE = "CORPUS.PY"

# --- DATA FORMATTERS ---

def clean_text_for_fstring(text: str) -> str:
    """Cleans text to be safely embedded in a Python triple-quoted f-string."""
    return text.strip().replace('"""', '\\"\\"\\"')

def format_tinystory_entry(entry, index):
    """Formats a TinyStories entry into the new structured format."""
    story_text = clean_text_for_fstring(entry['text'])
    variable_name = f"NARRATIVE_{index}"
    
    return (
        f'{variable_name} = {{\n'
        f'    "TASK_TYPE": "Narrative Generation",\n'
        f'    "SOURCE": "TinyStories",\n'
        f'    "NARRATIVE_TEXT": """{story_text}"""\n'
        f'}}\n\n'
    )

def format_openorca_entry(entry, index):
    """Formats an OpenOrca entry into the new structured format."""
    system_prompt = clean_text_for_fstring(entry['system_prompt'])
    instruction = clean_text_for_fstring(entry['question'])
    response = clean_text_for_fstring(entry['response'])
    
    variable_name = f"ASSISTANT_TASK_{index}"
    
    # Combine system prompt and question to form the full instruction
    full_instruction = f"{system_prompt}\n{instruction}".strip()
    
    return (
        f'{variable_name} = {{\n'
        f'    "TASK_TYPE": "Instruction Following",\n'
        f'    "SOURCE": "OpenOrca",\n'
        f'    "INSTRUCTION": """{full_instruction}""",\n'
        f'    "RESPONSE": """{response}"""\n'
        f'}}\n\n'
    )

# --- MAIN BUILDER LOGIC ---

def build_corpus():
    """
    Downloads all specified datasets and writes them to CORPUS.PY in the
    new structured format.
    """
    print(f"--- Corpus Builder (Architect's Version) Initialized ---")
    
    formatters = {
        "format_tinystory_entry": format_tinystory_entry,
        "format_openorca_entry": format_openorca_entry,
    }

    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        f.write("# CORPUS.PY\n")
        f.write("# This file was auto-generated by the architect's corpus_builder.py\n")
        f.write("# It contains a highly structured mix of narrative and instruction-following data.\n\n")

        total_entries = sum(config['count'] for config in DATA_MIX.values())
        
        with tqdm(total=total_entries, desc="Building Structured Corpus") as pbar:
            for name, config in DATA_MIX.items():
                dataset_id = config['id']
                count = config['count']
                formatter_func = formatters[config['formatter']]
                
                pbar.set_postfix_str(f"Downloading {name}...")
                try:
                    dataset = load_dataset(dataset_id, split='train', streaming=True)
                except Exception as e:
                    print(f"\n[FATAL ERROR] Could not download '{dataset_id}'.")
                    print(f"Error: {e}")
                    return
                
                pbar.set_postfix_str(f"Processing {name}...")
                entry_index = 0
                for entry in dataset:
                    if entry_index >= count:
                        break
                    
                    formatted_string = formatter_func(entry, entry_index)
                    f.write(formatted_string)
                    entry_index += 1
                    pbar.update(1)

    print(f"\n--- Success! ---")
    print(f"'{OUTPUT_FILE}' has been created with a superior, structured data format.")
    print("The Oracle will now learn the true shape of conversation.")

if __name__ == "__main__":
    build_corpus()