# corpus_builder.py
# V7 - The Purifier. This version uses Python's built-in repr() function
# to create a 100% syntactically correct CORPUS.PY, immune to data-induced errors.

from datasets import load_dataset
from tqdm import tqdm
import textwrap

# --- CONFIGURATION ---
DATA_MIX = {
    "OpenOrca": {
        "id": "Open-Orca/OpenOrca",
        "count": 5000,
        "formatter": "format_openorca_entry",
    },
    "TinyStories": {
        "id": "roneneldan/TinyStories",
        "count": 5000,
        "formatter": "format_tinystory_entry",
    }
}
OUTPUT_FILE = "CORPUS.PY"

# --- DATA FORMATTERS ---

def format_tinystory_entry(entry, index):
    """Formats a TinyStories entry using the robust repr() method."""
    story_text = entry['text'].strip()
    variable_name = f"NARRATIVE_{index}"
    
    return (
        f'{variable_name} = {{\n'
        f'    "TASK_TYPE": "Narrative Generation",\n'
        f'    "SOURCE": "TinyStories",\n'
        f'    "NARRATIVE_TEXT": {repr(story_text)}\n' # Use repr() for safety
        f'}}\n\n'
    )

def format_openorca_entry(entry, index):
    """Formats an OpenOrca entry using the robust repr() method."""
    system_prompt = entry['system_prompt'].strip()
    instruction = entry['question'].strip()
    response = entry['response'].strip()
    
    variable_name = f"ASSISTANT_TASK_{index}"
    
    full_instruction = f"{system_prompt}\n{instruction}".strip()
    
    return (
        f'{variable_name} = {{\n'
        f'    "TASK_TYPE": "Instruction Following",\n'
        f'    "SOURCE": "OpenOrca",\n'
        f'    "INSTRUCTION": {repr(full_instruction)},\n' # Use repr() for safety
        f'    "RESPONSE": {repr(response)}\n'            # Use repr() for safety
        f'}}\n\n'
    )

# --- MAIN BUILDER LOGIC ---

def build_corpus():
    """
    Downloads all specified datasets and writes them to CORPUS.PY.
    """
    print(f"--- Corpus Builder (Purifier Version) Initialized ---")
    
    formatters = {
        "format_tinystory_entry": format_tinystory_entry,
        "format_openorca_entry": format_openorca_entry,
    }

    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        f.write("# CORPUS.PY\n")
        f.write("# This file was auto-generated by the purifier corpus_builder.py\n")
        f.write("# It uses repr() to guarantee syntactic correctness.\n\n")

        total_entries = sum(config['count'] for config in DATA_MIX.values())
        
        with tqdm(total=total_entries, desc="Building Robust Corpus") as pbar:
            global_index = 0
            for name, config in DATA_MIX.items():
                dataset_id = config['id']
                count = config['count']
                formatter_func = formatters[config['formatter']]
                
                pbar.set_postfix_str(f"Downloading {name}...")
                try:
                    dataset = load_dataset(dataset_id, split='train', streaming=True)
                except Exception as e:
                    print(f"\n[FATAL ERROR] Could not download '{dataset_id}'.")
                    print(f"Error: {e}")
                    return
                
                pbar.set_postfix_str(f"Processing {name}...")
                entry_index = 0
                for entry in dataset:
                    if entry_index >= count:
                        break
                    
                    # Pass the correct index based on the dataset being processed
                    current_index = global_index if name == "OpenOrca" else entry_index
                    
                    formatted_string = formatter_func(entry, entry_index) # Use local index for variable name
                    f.write(formatted_string)
                    entry_index += 1
                    pbar.update(1)

    print(f"\n--- Success! ---")
    print(f"'{OUTPUT_FILE}' has been created with a robust, syntactically correct format.")
    print("The training script will no longer fail on import.")

if __name__ == "__main__":
    build_corpus()
